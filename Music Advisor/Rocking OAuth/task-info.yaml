type: edu
custom_name: stage2
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    sourceCompatibility = 11
    mainClassName = 'advisor.Main'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;

    class Attach {
        Function<String, CheckResult> func;

        Attach(Function<String, CheckResult> func) {
            this.func = func;
        }
    }

    public class MusicAdvisorTest extends StageTest<Attach> {

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("auth\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---SUCCESS---")) {
                            return new CheckResult(false,
                                "There is no \"---SUCCESS---\" after \"auth\" but should be");
                        }
                        if (!reply.contains("https://accounts.spotify.com/authorize?")) {
                            return new CheckResult(false,
                                "There is no link after \"auth\" but should be");
                        }
                        if (reply.contains("a19ee7dbfda443b2a8150c9101bfd645")) {
                            return new CheckResult(false,
                                    "You shouldn't use the client_id from the example!! " +
                                            "You should create your own id on the spotify site.");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("new\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("featured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("auth\nnew\nfeatured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---NEW RELEASES---")) {
                            return new CheckResult(false,
                                "When \"new\" was inputted there should be \"---NEW RELEASES---\" line");
                        }
                        if (!reply.contains("---FEATURED---")) {
                            return new CheckResult(false,
                                "When \"featured\" was inputted there should be \"---FEATURED---\" line");
                        }
                        return CheckResult.correct();
                    }))

            );
        }

        @Override
        public CheckResult check(String reply, Attach clue) {
            return clue.func.apply(reply);
        }
    }
  learner_created: false
- name: src/advisor/entities/Playlist.java
  visible: true
  text: |
    package advisor.entities;

    public class Playlist extends Entity {

        public Playlist(String name) {
            super(name);
        }

        @Override
        public String toString() {
            return getName();
        }
    }
  learner_created: true
- name: src/advisor/entities/Album.java
  visible: true
  text: |
    package advisor.entities;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class Album extends Entity {
        private List<Artist> artists;

        public Album(String name, List<Artist> artists) {
            super(name);
            this.artists = new ArrayList<>(artists);
        }

        @Override
        public String toString() {
            String result = getName() + " " + Arrays.toString(artists.toArray());
            return result;
        }
    }
  learner_created: true
- name: src/advisor/entities/PlaylistCategory.java
  visible: true
  text: |
    package advisor.entities;

    import java.util.Objects;

    public class PlaylistCategory extends Entity {

        public PlaylistCategory(String name) {
            super(name);
        }

        @Override
        public String getName() {
            return super.getName();
        }

        @Override
        public String toString() {
            return getName();
        }

        @Override
        public int hashCode() {
            return super.hashCode();
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            PlaylistCategory category = (PlaylistCategory) o;
            return Objects.equals(getName(), category.getName());
        }
    }
  learner_created: true
- name: src/advisor/ui/ConsoleUI.java
  visible: true
  text: |
    package advisor.ui;

    import advisor.entities.Album;
    import advisor.entities.Playlist;
    import advisor.entities.PlaylistCategory;
    import advisor.service.AdvService;

    import java.util.List;
    import java.util.Scanner;

    public class ConsoleUI {

        private static final String userInputStr = "> ";

        private static final String titleNewReleases = "---NEW RELEASES---";
        private static final String titleFeatured = "---FEATURED---";
        private static final String titleCategories = "---CATEGORIES---";

        private static final String messageGoodbye = "---GOODBYE!---";
        private static final String messageWrongCommand = "Wrong command!";

        private static final String commandNew = "new";
        private static final String commandFeatured = "featured";
        private static final String commandCategories = "categories";
        private static final String commandPlaylists = "playlists";
        private static final String commandExit = "exit";

        private AdvService advService;

        public ConsoleUI() {
            advService = new AdvService();
        }

        public void go() {
            Scanner scanner = new Scanner(System.in);

            boolean userWantsToExit = false;
            while (!userWantsToExit) {
                System.out.print(userInputStr);
                String[] commandAndArg = scanner.nextLine()
                        .trim()
                        .split("\\s+", 2);
                String command = "";
                String arg = "";
                if (commandAndArg.length >= 1) {
                    command = commandAndArg[0];
                }
                if (commandAndArg.length >= 2) {
                    arg = commandAndArg[1];
                }
                switch (command) {
                    case commandNew:
                        printNewReleases();
                        break;
                    case commandFeatured:
                        printFeatured();
                        break;
                    case commandCategories:
                        printCategories();
                        break;
                    case commandPlaylists:
                        printPlaylistsByCategory(arg);
                        break;
                    case commandExit:
                        userWantsToExit = true;
                        System.out.println(messageGoodbye);
                        break;
                    default:
                        System.out.println(messageWrongCommand);
                        break;
                }
            }
        }

        private static String getPlaylistsTitleWithCategory(String category) {
            return "---" + category.toUpperCase() + " PLAYLISTS---";
        }

        private void printNewReleases() {
            List<Album> releases = advService.getNewReleases();
            System.out.println(titleNewReleases);
            releases.forEach(System.out::println);
        }

        private void printFeatured() {
            List<Playlist> playlists = advService.getFeaturedPlaylists();
            System.out.println(titleFeatured);
            playlists.forEach(System.out::println);
        }

        private void printCategories() {
            List<PlaylistCategory> categories = advService.getCategories();
            System.out.println(titleCategories);
            categories.forEach(System.out::println);
        }

        private void printPlaylistsByCategory(String categoryName) {
            PlaylistCategory playlistCategory = new PlaylistCategory(categoryName);
            List<Playlist> playlists = advService.getPlaylistsByCategory(playlistCategory);
            System.out.println(getPlaylistsTitleWithCategory(categoryName));
            playlists.forEach(System.out::println);
        }
    }
  learner_created: true
- name: src/advisor/entities/Artist.java
  visible: true
  text: |
    package advisor.entities;

    public class Artist extends Entity {

        public Artist(String name) {
            super(name);
        }

        @Override
        public String toString() {
            return getName();
        }
    }
  learner_created: true
- name: src/advisor/entities/Entity.java
  visible: true
  text: |
    package advisor.entities;

    import java.util.Objects;

    public abstract class Entity {
        private String name;

        Entity(String name) {
            this.name = name;
        }

        public String getName() {
            return name;
        }

        @Override
        public String toString() {
            return name;
        };

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Entity entity = (Entity) o;
            return Objects.equals(name, entity.name);
        }

        @Override
        public int hashCode() {
            return Objects.hash(name);
        }
    }
  learner_created: true
- name: src/advisor/services/AdvService.java
  visible: true
  text: |
    package advisor.service;

    import advisor.entities.Album;
    import advisor.entities.Artist;
    import advisor.entities.Playlist;
    import advisor.entities.PlaylistCategory;

    import java.util.ArrayList;
    import java.util.List;

    public class AdvService {

        public List<Playlist> getFeaturedPlaylists() {
            List<Playlist> featuredPlaylists = new ArrayList<>();
            featuredPlaylists.add(new Playlist("Mellow Morning"));
            featuredPlaylists.add(new Playlist("Wake Up and Smell the Coffee"));
            featuredPlaylists.add(new Playlist("Monday Motivation"));
            featuredPlaylists.add(new Playlist("Songs to Sing in the Shower"));
            return featuredPlaylists;
        }

        public List<Album> getNewReleases() {
            List<Album> releases = new ArrayList<>();
            List<Artist> lsd = List.of(new Artist("Sia")
                    , new Artist("Diplo")
                    , new Artist("Labrinth"));
            releases.add(new Album("Mountains", lsd));
            releases.add(new Album("Runaway", List.of(new Artist("Lil Peep"))));
            releases.add(new Album("The Greatest Show", List.of(new Artist("Panic! At The Disco"))));
            releases.add(new Album("All Out Life", List.of(new Artist("Slipknot"))));
            return releases;
        }


        public List<PlaylistCategory> getCategories() {
            List<PlaylistCategory> categories = new ArrayList<>();
            categories.add(new PlaylistCategory("Top Lists"));
            categories.add(new PlaylistCategory("Pop"));
            categories.add(new PlaylistCategory("Mood"));
            categories.add(new PlaylistCategory("Latin"));
            return categories;
        }

        public List<Playlist> getPlaylistsByCategory(PlaylistCategory category) {
            List<Playlist> playlists = new ArrayList<>();
            playlists.add(new Playlist("Walk Like A Badass"));
            playlists.add(new Playlist("Rage Beats "));
            playlists.add(new Playlist("Arab Mood Booster "));
            playlists.add(new Playlist("Sunday Stroll"));
            return playlists;
        }
    }
  learner_created: true
- name: src/advisor/services/AuthorizationService.java
  visible: true
  learner_created: true
- name: src/advisor/services/AuthorizationServiceMockImpl.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/62/stages/336/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 28 Nov 2021 16:28:50 UTC
record: -1
